---
- hosts: all
  remote_user: "{{ remote_user_which_runs_script }}"
  tasks:
    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - python
        - build-essential
        - git-core
        - curl
        - sqlite3
        - libsqlite3-dev
        - libxml2-dev
        - libxslt1-dev
        - libreadline-dev
        - libyaml-dev
        - libcurl4-openssl-dev
        - libncurses5-dev
        - libgdbm-dev
        - libffi-dev
        - runit
        - postgresql
        - libpq-dev
        - nodejs
        - htop
        - python-psycopg2
        - memcached
        - vim

    - name: Create user
      user:
        name: "{{ deployer_user }}"
        createhome: yes
        shell: "/bin/bash"
        group: "{{ remote_sudo_group }}"
        generate_ssh_key: yes

    - name: Create sudoers.d directory
      file:
        path: /etc/sudoers.d
        owner: root
        group: root
        mode: 0755
        state: directory

    - name: Set includedir in sudoers
      lineinfile:
        dest: /etc/sudoers
        line: "#includedir /etc/sudoers.d"
        state: present
        validate: "/usr/sbin/visudo -cf %s"

    - name: Add user to sudoers
      lineinfile:
        dest: /etc/sudoers.d/deployer
        line: "{{deployer_user}} ALL=(ALL) NOPASSWD: ALL"
        create: true
        validate: "/usr/sbin/visudo -cf %s"

    - name: Copy my ssh key
      authorized_key:
        key: "{{ lookup('file', key_path) }}"
        user: "{{ deployer_user }}"
        state: present

    - name: Create user for postgres
      become: yes
      become_user: postgres
      postgresql_user:
        name: "{{ app_name }}"
        password: "{{ db_password }}"
        role_attr_flags: CREATEDB

- name: Install redis
  hosts: all
  roles:
    - DavidWittman.redis

- name: Install nginx
  hosts: all
  roles:
    - role: jdauphant.nginx
      nginx_configs:
        upstream:
          - "upstream {{ app_name }}
              { server unix:/tmp/unicorn_{{ app_name }}.sock fail_timeout=0;
            }"
      nginx_sites:
        application:
          - "client_max_body_size 4G"
          - "server_name {{ server_name }}"
          - "keepalive_timeout 5"
          - "root /var/www/{{ app_name }}/current/public"
          - "location ~ ^/(assets)/  {
              root /var/www/{{ app_name }}/current/public;
              index index.html;
              gzip_static on;
              expires max; add_header Cache-Control public;
            }"
          - "location / {
              if (-f $document_root/system/maintenance.html) {
                return 503;
              }
              try_files $uri @app;
            }"
          - "error_page 503 @maintenance"
          - "location @maintenance {
              rewrite ^(.*)$ /system/maintenance.html break;
             }"
          - "location @app {
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header Host $http_host;
              proxy_redirect off;
              proxy_pass http://{{ app_name }};
            }"

- name: Install ruby with rvm
  hosts: all
  become: true
  become_user: "{{ deployer_user }}"
  vars:
    rvm1_install_flags: '--auto-dotfiles --user-install'
    rvm1_install_path: '/home/{{ deployer_user }}/.rvm'
    rvm1_user: "{{ deployer_user }}"
    rvm1_rubies: ["{{ ruby_version }}"]
  roles:
    - role: rvm_io.rvm1-ruby
      tags: ruby
      become: true
      become_user: "{{ deployer_user }}"

- name: Create application gemset
  hosts: all
  become: true
  become_user: "{{ deployer_user }}"
  tasks:
    - name: Use rvm gemset or create
      shell: "rvm gemset use {{app_name}} --create"

- name: Install bundler
  hosts: all
  become: true
  become_user: "{{ deployer_user }}"
  tasks:
    - name: Install bundler
      shell: "gem install bundler"

- name: Chown /var/www folder to deployer_user
  hosts: all
  become: true
  become_user: "{{ deployer_user }}"
  tasks:
    - name: Chown www folder
      shell: "sudo chown {{ deployer_user }}:{{ remote_sudo_group }} /var/www"
